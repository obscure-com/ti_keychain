/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.obscure.keychain;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiContext;

import android.content.Context;
import android.content.SharedPreferences;


// This proxy can be created by calling Keychainmodule.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=KeychainModule.class)
public class KeychainItemProxy extends KrollProxy
{
	// Standard Debugging variables
	private static final String LCAT = "ExampleProxy";
	private static final boolean DBG = TiConfig.LOGD;
	
	private static final String  ACCOUNT_KEY    = "keychain.account";
	private static final String  VALUE_DATA_KEY = "keychain.valueData";
	private DesEncrypter encrypter;
	private SharedPreferences sharedPrefs;
	  
	 private Context androidContext;
	
	public KeychainItemProxy(TiContext tiContext) {
		super(tiContext);
		  androidContext = tiContext.getAndroidContext();
	}
	
    @Override
    public void handleCreationArgs(KrollModule createdInModule, Object[] args) {
        super.handleCreationArgs(createdInModule, args);
        if(args == null){
        	return;
        }
        if (args.length > 0) {
            String name = String.format("keychain.%s", (String) args[0]);
            sharedPrefs = androidContext.getSharedPreferences(name, Context.MODE_PRIVATE);
        }
        String key = "ThisIsTheKeyBlaQWE21343gBasdkl";
        if (args.length > 1) {
        	 key = (String) args[1];
        }
        try {
			encrypter = new DesEncrypter(key);
		} catch (Exception e) {
			Log.d(LCAT, "error creating keystore" ,e);
		}
    }

    @Kroll.getProperty
    @Kroll.method
    public String getAccount() {
        return restoreValueForKey(ACCOUNT_KEY);
    }

    @Kroll.setProperty
    @Kroll.method
    public void setAccount(String value) {
    	saveKeyValueEncrypted(ACCOUNT_KEY, value);
    }

    @Kroll.getProperty
    @Kroll.method
    public String getValueData() {
        return restoreValueForKey(VALUE_DATA_KEY);
    }

    @Kroll.setProperty
    @Kroll.method
    public void setValueData(String value) {
    	saveKeyValueEncrypted(VALUE_DATA_KEY, value);
    }
    
    @Kroll.method
    public void reset() {
        SharedPreferences.Editor editor = sharedPrefs.edit();
        editor.remove(ACCOUNT_KEY);
        editor.remove(VALUE_DATA_KEY);
        editor.commit();
    }
    
	private void saveKeyValueEncrypted(String key, String value) {
		try {
			value = encrypter.encrypt(value);
		} catch (Exception e) {
			Log.d(LCAT, "", e);
		}
		SharedPreferences.Editor editor = sharedPrefs.edit();
		editor.putString(key, value);
		editor.commit();
	}
	
	private String restoreValueForKey(String key){
		try {
			String value = sharedPrefs.getString(key, null);
			if(value!=null){
				return encrypter.decrypt(value);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}